// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: blogging/violation.proto

package blogging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ViolationService_GetViolations_FullMethodName = "/blogging.ViolationService/GetViolations"
	ViolationService_CreateReport_FullMethodName  = "/blogging.ViolationService/CreateReport"
	ViolationService_GetReports_FullMethodName    = "/blogging.ViolationService/GetReports"
)

// ViolationServiceClient is the client API for ViolationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViolationServiceClient interface {
	GetViolations(ctx context.Context, in *GetViolationsRequest, opts ...grpc.CallOption) (*GetViolationsResponse, error)
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error)
	GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error)
}

type violationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViolationServiceClient(cc grpc.ClientConnInterface) ViolationServiceClient {
	return &violationServiceClient{cc}
}

func (c *violationServiceClient) GetViolations(ctx context.Context, in *GetViolationsRequest, opts ...grpc.CallOption) (*GetViolationsResponse, error) {
	out := new(GetViolationsResponse)
	err := c.cc.Invoke(ctx, ViolationService_GetViolations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *violationServiceClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*CreateReportResponse, error) {
	out := new(CreateReportResponse)
	err := c.cc.Invoke(ctx, ViolationService_CreateReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *violationServiceClient) GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error) {
	out := new(GetReportsResponse)
	err := c.cc.Invoke(ctx, ViolationService_GetReports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViolationServiceServer is the server API for ViolationService service.
// All implementations should embed UnimplementedViolationServiceServer
// for forward compatibility
type ViolationServiceServer interface {
	GetViolations(context.Context, *GetViolationsRequest) (*GetViolationsResponse, error)
	CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error)
	GetReports(context.Context, *GetReportsRequest) (*GetReportsResponse, error)
}

// UnimplementedViolationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedViolationServiceServer struct {
}

func (UnimplementedViolationServiceServer) GetViolations(context.Context, *GetViolationsRequest) (*GetViolationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViolations not implemented")
}
func (UnimplementedViolationServiceServer) CreateReport(context.Context, *CreateReportRequest) (*CreateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedViolationServiceServer) GetReports(context.Context, *GetReportsRequest) (*GetReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReports not implemented")
}

// UnsafeViolationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViolationServiceServer will
// result in compilation errors.
type UnsafeViolationServiceServer interface {
	mustEmbedUnimplementedViolationServiceServer()
}

func RegisterViolationServiceServer(s grpc.ServiceRegistrar, srv ViolationServiceServer) {
	s.RegisterService(&ViolationService_ServiceDesc, srv)
}

func _ViolationService_GetViolations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViolationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).GetViolations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_GetViolations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).GetViolations(ctx, req.(*GetViolationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViolationService_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_CreateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViolationService_GetReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).GetReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_GetReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).GetReports(ctx, req.(*GetReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ViolationService_ServiceDesc is the grpc.ServiceDesc for ViolationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViolationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blogging.ViolationService",
	HandlerType: (*ViolationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetViolations",
			Handler:    _ViolationService_GetViolations_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _ViolationService_CreateReport_Handler,
		},
		{
			MethodName: "GetReports",
			Handler:    _ViolationService_GetReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogging/violation.proto",
}
