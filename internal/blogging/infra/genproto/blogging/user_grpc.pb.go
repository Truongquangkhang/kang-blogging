// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: blogging/user.proto

package blogging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_GetUsers_FullMethodName           = "/blogging.UserService/GetUsers"
	UserService_GetUserDetail_FullMethodName      = "/blogging.UserService/GetUserDetail"
	UserService_UpdateUserDetail_FullMethodName   = "/blogging.UserService/UpdateUserDetail"
	UserService_DeleteUserDetail_FullMethodName   = "/blogging.UserService/DeleteUserDetail"
	UserService_FollowUserDetail_FullMethodName   = "/blogging.UserService/FollowUserDetail"
	UserService_UnfollowUserDetail_FullMethodName = "/blogging.UserService/UnfollowUserDetail"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUserDetail(ctx context.Context, in *GetUserDetailRequest, opts ...grpc.CallOption) (*GetUserDetailResponse, error)
	UpdateUserDetail(ctx context.Context, in *UpdateUserDetailRequest, opts ...grpc.CallOption) (*UpdateUserDetailResponse, error)
	DeleteUserDetail(ctx context.Context, in *DeleteUserDetailRequest, opts ...grpc.CallOption) (*DeleteUserDetailResponse, error)
	FollowUserDetail(ctx context.Context, in *FollowUserDetailRequest, opts ...grpc.CallOption) (*FollowUserDetailResponse, error)
	UnfollowUserDetail(ctx context.Context, in *UnfollowUserDetailRequest, opts ...grpc.CallOption) (*UnfollowUserDetailResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, UserService_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserDetail(ctx context.Context, in *GetUserDetailRequest, opts ...grpc.CallOption) (*GetUserDetailResponse, error) {
	out := new(GetUserDetailResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserDetail(ctx context.Context, in *UpdateUserDetailRequest, opts ...grpc.CallOption) (*UpdateUserDetailResponse, error) {
	out := new(UpdateUserDetailResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserDetail(ctx context.Context, in *DeleteUserDetailRequest, opts ...grpc.CallOption) (*DeleteUserDetailResponse, error) {
	out := new(DeleteUserDetailResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FollowUserDetail(ctx context.Context, in *FollowUserDetailRequest, opts ...grpc.CallOption) (*FollowUserDetailResponse, error) {
	out := new(FollowUserDetailResponse)
	err := c.cc.Invoke(ctx, UserService_FollowUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnfollowUserDetail(ctx context.Context, in *UnfollowUserDetailRequest, opts ...grpc.CallOption) (*UnfollowUserDetailResponse, error) {
	out := new(UnfollowUserDetailResponse)
	err := c.cc.Invoke(ctx, UserService_UnfollowUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetUserDetail(context.Context, *GetUserDetailRequest) (*GetUserDetailResponse, error)
	UpdateUserDetail(context.Context, *UpdateUserDetailRequest) (*UpdateUserDetailResponse, error)
	DeleteUserDetail(context.Context, *DeleteUserDetailRequest) (*DeleteUserDetailResponse, error)
	FollowUserDetail(context.Context, *FollowUserDetailRequest) (*FollowUserDetailResponse, error)
	UnfollowUserDetail(context.Context, *UnfollowUserDetailRequest) (*UnfollowUserDetailResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) GetUserDetail(context.Context, *GetUserDetailRequest) (*GetUserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetail not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserDetail(context.Context, *UpdateUserDetailRequest) (*UpdateUserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDetail not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserDetail(context.Context, *DeleteUserDetailRequest) (*DeleteUserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDetail not implemented")
}
func (UnimplementedUserServiceServer) FollowUserDetail(context.Context, *FollowUserDetailRequest) (*FollowUserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUserDetail not implemented")
}
func (UnimplementedUserServiceServer) UnfollowUserDetail(context.Context, *UnfollowUserDetailRequest) (*UnfollowUserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUserDetail not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserDetail(ctx, req.(*GetUserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserDetail(ctx, req.(*UpdateUserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserDetail(ctx, req.(*DeleteUserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FollowUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FollowUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FollowUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FollowUserDetail(ctx, req.(*FollowUserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnfollowUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnfollowUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnfollowUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnfollowUserDetail(ctx, req.(*UnfollowUserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blogging.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "GetUserDetail",
			Handler:    _UserService_GetUserDetail_Handler,
		},
		{
			MethodName: "UpdateUserDetail",
			Handler:    _UserService_UpdateUserDetail_Handler,
		},
		{
			MethodName: "DeleteUserDetail",
			Handler:    _UserService_DeleteUserDetail_Handler,
		},
		{
			MethodName: "FollowUserDetail",
			Handler:    _UserService_FollowUserDetail_Handler,
		},
		{
			MethodName: "UnfollowUserDetail",
			Handler:    _UserService_UnfollowUserDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogging/user.proto",
}
