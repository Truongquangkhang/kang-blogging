openapi: 3.0.1
info:
  title: Kang-Blogging APIs
  description: blogging management
  version: v1.0.0
servers:
  - url: 'https://localhost:8080'
    description: local
paths:
  /api/v1/iam/login:
    post:
      tags:
        - IAM
      summary: '[IAM] Login with username and password'
      description: |-
        - Login with username and password
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: login via username (email, phonen number,...)
                  example: test@123
                password:
                  type: string
                  description: password
                  example: hehehe
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                            description: access token (jwt)
                          refresh_token:
                            type: string
                            description: refresh token (jwt)
                          user_infor:
                            type: array
                            description: List campaigns
                            items:
                              $ref: '#/components/schemas/UserInfo'

        '400':
          description: |-
            400001: `Invalid username or password`: Invalid params
          content:
            application/json:
              examples:
                400_001 - Invalid params:
                  summary: 400_001 - Invalid params
                  description: Invalid params
                  value:
                    code: '400_001'
                    message: Invalid params
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/iam/register:
    post:
      tags:
        - IAM
      summary: '[IAM] Register services'
      description: |-
        - Register api
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - display_name
                - email
                - gender
                - birth_day
                - username
                - password
              properties:
                username:
                  type: string
                  description: login via username (email, phonen number,...)
                  example: test@123
                password:
                  type: string
                  description: password
                  example: hehehe
                name:
                  type: string
                  description: full name
                  example: Truong Quang Khang
                display_name:
                  type: string
                  description: Display name
                  example: khang-cute-123
                email:
                  type: string
                  description: Email
                phone_numbers:
                  type: string
                  description: '0123456789'
                gender:
                  type: boolean
                  description: Male/Female
                birth_day:
                  type: integer
                  description: Day of birth (unix timestamp)
                avatar:
                  type: string
                  description: Link url of a image
      responses:
        '200':
          description: Success
        '400':
          description: |-
            400001: `Invalid username or password`: Invalid params
          content:
            application/json:
              examples:
                400_001 - Invalid params:
                  summary: 400_001 - Invalid params
                  description: Invalid params
                  value:
                    code: '400_001'
                    message: Invalid params
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/iam/refresh-access-token:
    post:
      tags:
        - IAM
      description: |-
        - refresh your access token.
      summary: 'Refresh access token'
      operationId: refreshAccessToken
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/iam/check-exist-username:
    get:
      tags:
        - IAM
      description: |-
        - check exist of a username.
      summary: 'Get list users'
      operationId: checkExistUsername
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: username of a account
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          already_exist:
                            type: boolean
                            default: false
  /api/v1/iam/change-password:
    post:
      tags:
        - IAM
      description: |-
        - Change password.
      summary: 'change password'
      operationId: refreshAccessToken
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/user:
    get:
      tags:
        - User
      description: |-
        - get user by params.
      summary: 'Get list users'
      operationId: getUsers
      parameters:
        - name: search_name
          in: query
          required: false
          description: 'search with name'
          schema:
            type: string
        - name: search_by
          in: query
          required: false
          description: 'search by field'
          schema:
            enum:
              - name
              - email
              - phone_number
        - name: following
          in: query
          required: false
          description: 'filter my following user'
          schema:
            type: boolean
        - name: followed_by_me
          in: query
          required: false
          description: 'get users followed me'
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
          required: true
          description: current page
        - name: page_size
          in: query
          required: true
          description: 'total items in a page'
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            description: list users
                            items:
                              $ref: '#/components/schemas/UserInfoMetadata'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/user/{user_id}:
    get:
      tags:
        - User
      description: |-
        - get user by params.
      summary: 'Get list users'
      operationId: getUserDetail
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/UserInfo'
    patch:
      tags:
        - User
      description: |-
        - get user by params.
      summary: 'Update profile of a user'
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                gender:
                  type: boolean
                avatar:
                  type: string
                display_name:
                  type: string
                phone_number:
                  type: string
                is_active:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/UserInfo'
  /api/v1/user/{user_id}/following:
    get:
      tags:
        - Get Users are following of this user
      description: |-
        - get user following.
      summary: 'Get following of a users'
      operationId: getFollowingUsers
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserInfoMetadata'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
  /api/v1/user/{user_id}/followed:
    get:
      tags:
        - Get Users Followed
      description: |-
        - get user followed.
      summary: 'Get followed of a users'
      operationId: getFollowedUsers
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserInfoMetadata'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
  /api/v1/user/{user_id}/follow:
    post:
      tags:
        - Follow
      description: |-
        - Follow a user.
      summary: 'Follow a user'
      operationId: followUser
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
    delete:
      tags:
        - Follow
      description: |-
        - Unfollow a user.
      summary: 'Unfollow a user'
      operationId: unfollowUser
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/blog:
    get:
      tags:
        - Blog
      description: |-
        - get list blog
      summary: 'Get blog with params'
      operationId: getBlog
      parameters:
        - in: query
          name: categoryIds
          required: false
          schema:
            type: string
          description: Query blogs with list categoriesIDs (get all with empty this params)
          example: '1,2,3,...'
        - in: query
          name: authorIds
          required: false
          schema:
            type: string
          description: Query blogs with list author ids (get all with empty this params)
          example: '1,2,3,...'
        - name: search_name
          in: query
          required: false
          description: 'search with name'
          schema:
            type: string
        - name: search_by
          in: query
          required: false
          description: 'search by field'
          schema:
            enum:
              - title
              - author
              - content
        - in: query
          name: sort_by
          required: false
          description: "sort blogs"
          schema:
            enum:
              - latest
              - total_comments
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blogs:
                            type: array
                            items:
                              $ref: '#/components/schemas/BlogMetadata'
                          pagination:
                            $ref: '#/components/schemas/Pagination'

  /api/v1/create-blog:
    post:
      tags:
        - Blog
      description: |-
        - Create new a blog.
      summary: 'Creaet blogging'
      operationId: createBlogging
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                categoryIds:
                  type: array
                  items:
                    type: string
                thumbnail:
                  type: string
                content:
                  type: string
                  format: html
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blog:
                            $ref: '#/components/schemas/BlogInfo'
  /api/v1/blog/{blog_id}:
    get:
      tags:
        - Blog
      description: |-
        - get user by params.
      summary: 'Get detail of a blogging'
      operationId: getBloggingDetail
      parameters:
        - in: path
          name: blog_id
          schema:
            type: string
          required: true
          description: id of a blog
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blog:
                            $ref: '#/components/schemas/BlogInfo'
    patch:
      tags:
        - Blog
      description: |-
        - Update infomations of blog.
      summary: 'Update blogging'
      operationId: updateBlogging
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: blog_id
          schema:
            type: string
          required: true
          description: uuid of blogging
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                categories:
                  type: array
                  items:
                    $ref: '#/components/schemas/Category'
                thumbnail:
                  type: string
                content:
                  type: string
                  format: html
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blog:
                            $ref: '#/components/schemas/BlogInfo'
    delete:
      tags:
        - Blog
      description: |-
        - Delete a blog.
      summary: 'Delete blogging'
      operationId: deleteBlogging
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: blog_id
          schema:
            type: string
          required: true
          description: uuid of blogging
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/blog/{blog_id}/comment:
    get:
      tags:
        - Comment
      description: |-
        - Get comments of a blog
      summary: 'Get comment by param'
      operationId: getComment
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comments:
                            type: array
                            items:
                              properties:
                                comment:
                                  $ref: '#/components/schemas/Comment'
                                replies:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/Comment'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - Comment
      description: |-
        - Create new a comment into the blog.
      summary: 'Create comment'
      operationId: createComment
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: markdown
                reply_comment_id:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comment:
                            $ref: '#/components/schemas/Comment'
  /api/v1/comment:
    get:
      tags:
        - Comment
      description: |-
        - Get Comment by param.
      summary: 'Get comments by param'
      operationId: getComments
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
        - in: query
          name: searchName
          schema:
            type: string
          required: false
          description: |
            - Call api without categoryName then return all Categories
        - in: query
          name: sortBy
          schema:
            type: string
          required: false
          description: |
            - Apply sort by (blog, ...)
        - in: query
          name: isToxicity
          schema:
            type: boolean
          required: false
          description: |
            - Query get comment is toxicity
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comments:
                            type: object
                            properties:
                              comment_info:
                                $ref: '#/components/schemas/Comment'
                              type_comment:
                                enum:
                                  - comment_on_blog
                                  - reply_comment
                              blog:
                                $ref: '#/components/schemas/BlogMetadata'
                              reply_comment_id:
                                type: string
                          pagination:
                              $ref: '#/components/schemas/Pagination'
  /api/v1/comment/{comment_id}:
    get:
      tags:
        - Comment
      description: |-
        - Get Detail a Comment.
      summary: 'Get comment by id'
      operationId: getCommentDetail
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comments:
                            type: object
                            properties:
                              comment_info:
                                $ref: '#/components/schemas/Comment'
                              type_comment:
                                enum:
                                  - comment_on_blog
                                  - reply_comment
                              reply_comment_id:
                                type: string
    patch:
      tags:
        - Comment
      description: |-
        - Update a comment
      summary: 'Update comment'
      operationId: updateComment
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: markdown
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comment:
                            $ref: '#/components/schemas/Comment'
    delete:
      tags:
        - Comment
      description: |-
        - Delete a comment
      summary: 'Delete comment'
      operationId: deleteComment
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/comment/{comment_id}/setCommentAsToxic:
    post:
      tags:
        - Comment
      description: |-
        - Set a comment is toxic
        - Set a Comment isn't toxic
        - Api support admin make a comment is toxic
      summary: 'set comment as toxic'
      operationId: setCommentAsToxic
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                toxic_indexes:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comment:
                            $ref: '#/components/schemas/Comment'
  /api/v1/category:
    get:
      tags:
        - Category
      description: |-
        - Get categories.
      summary: 'Get categories by param'
      operationId: getCategories
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
        - in: query
          name: searchName
          schema:
            type: string
          required: false
          description: |
            - Call api without categoryName then return all Categories
        - in: query
          name: sortBy
          schema:
            type: string
          required: false
          description: |
            - Apply sort by (blog, ...)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          categories:
                            type: array
                            items:
                              $ref: '#/components/schemas/CategoryMetadata'
                          pagination:
                            $ref: '#/components/schemas/Comment'
    post:
      tags:
        - Category
      description: |-
        - Create a category.
      summary: 'Create category'
      operationId: createCategory
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
    patch:
      tags:
        - Category
      description: |-
        - Update a category.
      summary: 'Update category'
      operationId: updateCategory
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/violation:
    get:
      tags:
        - Violation
      description: |-
        - get violations by params
      summary: 'Get Violation By Params'
      operationId: getViolations
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: user_ids
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/report:
    get:
      tags:
        - Violation
      description: |-
        - get report by params
      summary: 'Get Report By Params'
      operationId: getReport
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
        - in: query
          name: type
          schema:
            type: string
          description: |
            - Enum (blog, comment)
        - in: query
          name: user_ids
          schema:
            type: string
        - in: query
          name: is_closed
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comments:
                            type: array
                            items:
                              - $ref: "#/components/schemas/Report"
                          pagination:
                            $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - Violation
      description: |-
        - Create a report.
      summary: 'Create Report'
      operationId: createReport
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                type:
                  type: string
                target_id:
                  type: string
                reason:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/report/{report_id}:
    delete:
      tags:
        - Violation
      description: |-
        - Close a report.
      summary: 'Close Report'
      operationId: closeReport
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/upload-image:
    post:
      tags:
        - Image
      description: |-
        - Upload a image via api.
      summary: 'Upload image'
      operationId: uploadImage
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          image:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Success
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
  /api/v1/admin/dashboard:
    get:
      tags:
        - Admin-management
      description: |-
        - Api support for admins manage system.
      summary: 'DaskBoard'
      operationId: dashboard
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
        - in: query
          name: searchName
          schema:
            type: string
          required: false
          description: |
            - Call api without categoryName then return all Categories
        - in: query
          name: sortBy
          schema:
            type: string
          required: false
          description: |
            - Apply sort by (blog, ...)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          total_blogs:
                            type: integer
                          total_comments:
                            type: integer
                          total_categories:
                            type: integer
                          total_users:
                            type: integer
                          users_increase_in_day:
                            type: integer
                          blogs_increase_in_day:
                            type: integer
                          comments_increase_in_day:
                            type: integer
                          latest_blogs:
                            type: array
                            items:
                              $ref: '#/components/schemas/BlogMetadata'
                          latest_comments:
                            type: array
                            items:
                              $ref: "#/components/schemas/Comment"
  /api/v1/policy:
    get:
      tags:
        - Admin-management
      description: |-
        - Get policies of system
      summary: 'Get Policies'
      operationId: getPolicies
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          policies:
                            type: array
                            items:
                              $ref: "#/components/schemas/Policy"
    patch:
      tags:
        - Admin-management
      description: |-
        - Update policies of system
      summary: 'Update Policies'
      operationId: updatePolicies
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          policies:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Policy"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
components:
  schemas:
    BaseAPIResponse:
      type: object
      properties:
        code:
          type: string
          example: 0
        message:
          type: string
          description: response message
          example: success
    UserInfo:
      type: object
      properties:
        user_info:
          $ref: '#/components/schemas/UserInfoMetadata'
        blogs:
          type: array
          items:
            $ref: '#/components/schemas/BlogMetadata'
    BlogInfo:
      type: object
      properties:
        blog_info:
          $ref: '#/components/schemas/BlogMetadata'
        content:
          type: string
          format: text<HTML>
          description: 'HTML of a content'
    Comment:
      type: object
      required:
        - id
        - content
        - is_toxicity
      properties:
        id:
          type: string
        content:
          type: string
        is_toxicity:
          type: boolean
        created_at:
          type: integer
        updated_at:
          type: integer
        user:
          $ref: '#/components/schemas/UserInfoMetadata'
    UserInfoMetadata:
      type: object
      properties:
        id:
          type: string
          example: uuid
        name:
          type: string
          example: quang khang
        email:
          type: string
          example: khang@123
        gender:
          type: boolean
          example: true
        avatar:
          type: string
          example: image (url of a picture)
        display_name:
          type: string
          example: 1kang
        total_blogs:
          type: integer
          example: 3
        total_discussions:
          type: integer
          example: 10
        description:
          type: string
          example: "im TQK"
        is_active:
          type: boolean
          default: true
          example: true
        created_at:
          type: integer
          example: 123
        is_following:
          type: boolean
        is_followed:
          type: boolean
    BlogMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        thumbnail:
          type: string
        created_at:
          type: integer
        author:
          $ref: '#/components/schemas/UserInfoMetadata'
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Policy:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    CategoryMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        blogCount:
          type: integer
    Violation:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        target_id:
          type: string
        description:
          type: string
        created_at:
          type: integer
        user:
          $ref: "#/components/schemas/UserInfoMetadata"
    Report:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        target_id:
          type: string
        description:
          type: string
        user:
          $ref: "#/components/schemas/UserInfoMetadata"
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 10
        total:
          type: integer
          example: 10
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]
