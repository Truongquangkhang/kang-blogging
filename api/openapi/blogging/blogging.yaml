openapi: 3.0.1
info:
  title: Kang-Blogging APIs
  description: blogging management
  version: v1.0.0
servers:
  - url: 'https://localhost:10080'
    description: local
paths:
  /api/v1/iam/login:
    post:
      tags:
        - IAM
      summary: '[IAM] Login with username and password'
      description: |-
        - Login with username and password
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: login via username (email, phonen number,...)
                  example: test@123
                password:
                  type: string
                  description: password
                  example: hehehe
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                            description: access token (jwt)
                          refresh_token:
                            type: string
                            description: refresh token (jwt)
                          user_infor:
                            type: array
                            description: List campaigns
                            items:
                              $ref: '#/components/schemas/UserInfo'

        '400':
          description: |-
            400001: `Invalid username or password`: Invalid params
          content:
            application/json:
              examples:
                400_001 - Invalid params:
                  summary: 400_001 - Invalid params
                  description: Invalid params
                  value:
                    code: '400_001'
                    message: Invalid params
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/iam/register:
    post:
      tags:
        - IAM
      summary: '[IAM] Register services'
      description: |-
        - Register api
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - display_name
                - email
                - gender
                - birth_day
                - username
                - password
              properties:
                username:
                  type: string
                  description: login via username (email, phonen number,...)
                  example: test@123
                password:
                  type: string
                  description: password
                  example: hehehe
                name:
                  type: string
                  description: full name
                  example: Truong Quang Khang
                display_name:
                  type: string
                  description: Display name
                  example: khang-cute-123
                email:
                  type: string
                  description: Email
                phone_numbers:
                  type: string
                  description: '0123456789'
                gender:
                  type: boolean
                  description: Male/Female
                birth_day:
                  type: integer
                  description: Day of birth (unix timestamp)
                avatar:
                  type: string
                  description: Link url of a image
      responses:
        '200':
          description: Success
        '400':
          description: |-
            400001: `Invalid username or password`: Invalid params
          content:
            application/json:
              examples:
                400_001 - Invalid params:
                  summary: 400_001 - Invalid params
                  description: Invalid params
                  value:
                    code: '400_001'
                    message: Invalid params
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/iam/check-exist-username:
    get:
      tags:
        - IAM
      description: |-
        - check exist of a username.
      summary: 'Get list users'
      operationId: checkExistUsername
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: username of a account
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          already_exist:
                            type: boolean
                            default: false
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/user:
    get:
      tags:
        - User
      description: |-
        - get user by params.
      summary: 'Get list users'
      operationId: getUsers
      parameters:
        - name: search_name
          in: query
          required: false
          description: 'search with name'
          schema:
            type: string
        - name: search_by
          in: query
          required: false
          description: 'search by field'
          schema:
            enum:
              - name
              - email
              - phone_number
        - name: following
          in: query
          required: false
          description: 'filter my following user'
          schema:
            type: boolean
        - name: followed_by_me
          in: query
          required: false
          description: 'get users followed me'
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
          required: true
          description: current page
        - name: page_size
          in: query
          required: true
          description: 'total items in a page'
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            description: list users
                            items:
                              $ref: '#/components/schemas/UserInfoMetadata'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '500':
          description: |-
            500000: `Internal Server Error`: Internal Server Error
          content:
            application/json:
              examples:
                500_000 - Server error:
                  summary: 500_000 - Server error
                  description: internal error
                  value:
                    code: '500_000'
                    message: Internal Server Error
  /api/v1/user/{user_id}:
    get:
      tags:
        - User
      description: |-
        - get user by params.
      summary: 'Get list users'
      operationId: getUserDetail
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/UserInfo'
    patch:
      tags:
        - User
      description: |-
        - get user by params.
      summary: 'Update profile of a user'
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: uuid of users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                gender:
                  type: boolean
                avatar:
                  type: string
                display_name:
                  type: string
                phone_number:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/UserInfo'
  /api/v1/blog:
    get:
      tags:
        - Blog
      description: |-
        - get list blog
      summary: 'Get blog with params'
      operationId: getBlog
      parameters:
        - in: query
          name: categoryIds
          required: false
          schema:
            type: string
          description: Query blogs with list categoriesIDs (get all with empty this params)
          example: '1,2,3,...'
        - in: query
          name: authorIds
          required: false
          schema:
            type: string
          description: Query blogs with list author ids (get all with empty this params)
          example: '1,2,3,...'
        - name: search_name
          in: query
          required: false
          description: 'search with name'
          schema:
            type: string
        - name: search_by
          in: query
          required: false
          description: 'search by field'
          schema:
            enum:
              - title
              - author
              - content
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blogs:
                            type: array
                            items:
                              $ref: '#/components/schemas/BlogMetadata'
                          pagination:
                            $ref: '#/components/schemas/Pagination'

  /api/v1/create-blog:
    post:
      tags:
        - Blog
      description: |-
        - Create new a blog.
      summary: 'Creaet blogging'
      operationId: createBlogging
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                categoryIds:
                  type: array
                  items:
                    type: string
                thumbnail:
                  type: string
                content:
                  type: string
                  format: html
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blog:
                            $ref: '#/components/schemas/BlogInfo'
  /api/v1/blog/{blog_id}:
    get:
      tags:
        - Blog
      description: |-
        - get user by params.
      summary: 'Get detail of a blogging'
      operationId: getBloggingDetail
      parameters:
        - in: path
          name: blog_id
          schema:
            type: string
          required: true
          description: id of a blog
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blog:
                            $ref: '#/components/schemas/BlogInfo'
    patch:
      tags:
        - Blog
      description: |-
        - Update infomations of blog.
      summary: 'Update blogging'
      operationId: updateBlogging
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: blog_id
          schema:
            type: string
          required: true
          description: uuid of blogging
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                categories:
                  type: array
                  items:
                    $ref: '#/components/schemas/Category'
                thumbnail:
                  type: string
                content:
                  type: string
                  format: html
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          blog:
                            $ref: '#/components/schemas/BlogInfo'
    delete:
      tags:
        - Blog
      description: |-
        - Delete a blog.
      summary: 'Delete blogging'
      operationId: deleteBlogging
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: blog_id
          schema:
            type: string
          required: true
          description: uuid of blogging
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
  /api/v1/comment:
    get:
      tags:
        - Comment
      description: |-
        - Get comments.
        - If call api without param then get all comment
      summary: 'Get comment by param'
      operationId: getComment
      parameters:
        - in: query
          name: blog_ids
          schema:
            type: array
            items:
              type: string
          required: false
        - in: query
          name: author_ids
          schema:
            type: array
            items:
              type: string
          required: false
        - in: query
          name: is_toxicity
          schema:
            type: boolean
          required: false
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: '#/components/schemas/Comment'
                          replies:
                            type: array
                            items:
                              $ref: '#/components/schemas/Comment'
                          pagination:
                            $ref: '#/components/schemas/Comment'
  /api/v1/category:
    get:
      tags:
        - Category
      description: |-
        - Get categories.
      summary: 'Get categories by param'
      operationId: getCategories
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Current page, for high performance try to use pagination.offset instead! (default 1)
        - in: query
          name: pageSize
          required: true
          description: Total item in a page (default is 10)
          schema:
            type: integer
        - in: query
          name: searchName
          schema:
            type: string
          required: false
          description: |
            - Call api without categoryName then return all Categories
        - in: query
          name: sortBy
          schema:
            type: string
          required: false
          description: |
            - Apply sort by (blog, ...)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseAPIResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          categories:
                            type: array
                            items:
                              $ref: '#/components/schemas/CategoryMetadata'
                          pagination:
                            $ref: '#/components/schemas/Comment'
components:
  schemas:
    BaseAPIResponse:
      type: object
      properties:
        code:
          type: string
          example: 0
        message:
          type: string
          description: response message
          example: success
    UserInfo:
      type: object
      properties:
        user_info:
          $ref: '#/components/schemas/UserInfoMetadata'
        blogs:
          type: array
          items:
            $ref: '#/components/schemas/BlogMetadata'
    BlogInfo:
      type: object
      properties:
        blog_info:
          $ref: '#/components/schemas/BlogMetadata'
        content:
          type: string
          format: text<HTML>
          description: 'HTML of a content'
    Comment:
      type: object
      properties:
        content:
          type: string
        author:
          $ref: '#/components/schemas/UserInfoMetadata'
        created_at:
          type: integer
        edit_at:
          type: integer
        is_toxicity:
          type: boolean
        is_deleted:
          type: boolean
    UserInfoMetadata:
      type: object
      properties:
        id:
          type: string
          example: uuid
        name:
          type: string
          example: quang khang
        email:
          type: string
          example: khang@123
        gender:
          type: boolean
          example: true
        avatar:
          type: string
          example: image (url of a picture)
        display_name:
          type: string
          example: 1kang
        total_blogs:
          type: integer
          example: 3
        is_active:
          type: boolean
          default: true
          example: true
    BlogMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        thumbnail:
          type: string
        created_at:
          type: integer
        author:
          $ref: '#/components/schemas/UserInfoMetadata'
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    CategoryMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        blogCount:
          type: integer
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 10
        total:
          type: integer
          example: 10
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]
